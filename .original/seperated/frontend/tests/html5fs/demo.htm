<!DOCTYPE html>
<!-- Author: Eric Bidelman (ericbidelman@chromium.org) -->
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="chrome=1" />
  <title>FileEntry.toURL(), createObjectURL, dataURL</title>
<!--https://html5-demos.appspot.com/static/filesystem/generatingResourceURIs.html-->
  <style>
    html { height: 100%; }
    body {
      padding: 2em;
      margin: 0;
      font: 12pt normal 'Myriad Pro', Arial, sans-serif;
      background: -moz-radial-gradient(center center, #fff, #bbb) no-repeat;
      background: -webkit-radial-gradient(center center, #fff, #bbb) no-repeat;
      color: #222;
    }
    img {
      max-width: 100px;
      border: 1px solid #999;
    }
    output {
      display: inline-block;
      text-align: center;
      margin-top: 2em;
      width: 100%;
    }
    h2 {
      margin: 0 0 0.25em 0;
      text-shadow: -1px 1px #fff;
    }
    a {
      color: navy;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    figure {
      text-align: center;
      display: inline-block;
      vertical-align: top;
      margin: 0;
      width: 300px;
    }
    figcaption {
      font-size: 9pt;
      overflow: hidden;
      text-overflow: ellipsis;
      word-wrap: no-break;
    }
    details {
      font-size: 80%;
      border: 1px solid #aaa;
      border-radius: 5px;
      padding: 5px 10px;
      margin-bottom: 1em;
      background: rgba(255,255,255,0.75);
      width: 750px;
    }
    details p {
      margin: 5px 0;
    }
    details > ul {
      margin: 0;
    }
    li {
      list-style: none;
    }
    .button {
      height: 26px;
      width: 145px;
    }
    .button::-webkit-file-upload-button,
    .button::-moz-file-upload-button {
      visibility: hidden;
    }
    .button:before {
      content: 'Import image files';
      display: inline-block;
      background: -webkit-gradient(linear, 0% 40%, 0% 70%, from(#F9F9F9), to(#E3E3E3));
      border: 1px solid #999;
      border-radius: 3px;
      padding: 5px 8px;
      outline: none;
      white-space: nowrap;
      -webkit-user-select: none;
      user-select: none;
      cursor: pointer;
      text-shadow: 1px 1px #fff;
      font-weight: 700;
      font-size: 10pt;
    }
    .button:hover:before {
      border-color: black;
    }
    .button:active:before {
      background: -webkit-gradient(linear, 0% 40%, 0% 70%, from(#E3E3E3), to(#F9F9F9));
    }
    #filelist {
      padding-top: 0.5em;
    }
    #filelist .remove {
      margin-left: 10px;
      font-size: small;
      color: black;
    }
  </style>
</head>
<body>

<h2>Generating URLs to File Resources</h3>

<details open="open">
  <summary>
    There are 3 different ways to obtain a URL handle for a file stored in the HTML5
    <a href="http://dev.w3.org/2009/dap/file-system/pub/FileSystem/">FileSystem API</a>:
  </summary>
  <ul>
    <li><code>window.URL.createObjectURL()</code></li>
    <li><code>FileEntry.toURL()</code></li>
    <li>Read the file contents as a <code>dataURL</code></li>
  </ul>
  <p>You can use one of these generated URLs as the <code>src</code> attribute
  for an &lt;iframe&gt; / &lt;img&gt; element.</p>

  <p><strong>Instructions</strong>: Use the button below to import image files
  into the app's FileSystem. Once you've got a list of files, click one to display it.</p>
</details>

<div>
  <input type="file" id="files" multiple class="button" accept="image/*">
  <div id="filelist"><em>Loading files...</em></div>
</div>

<output></output>

<script>
var FS_ = null;
window.URL = window.URL || window.webkitURL;
window.resolveLocalFileSystemURL = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL || window.resolveLocalFileSystemURI;
window.BlobBuilder = window.WebKitBlobBuilder || window.MozBlobBuilder || window.BlobBuilder;
window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;

function errorCallback(e) {
  console.log('Error: ', e);
}

function buildFigure(src) {
  var img = document.createElement('img');
  img.src = src;
  img.title = 'img.src = ' + img.src;
  img.alt = img.title;

  var figcaption = document.createElement('figcaption');
  figcaption.innerHTML = [
      '<a href="' + img.src + '" target="_new" ',
      'alt="This URL can be opened by the browser" ' ,
      'title="This URL can be opened by the browser">', img.src, '</a>'
      ].join('');

  var figure = document.createElement('figure');
  figure.appendChild(img);
  figure.appendChild(figcaption);

  return figure;
}

function onFileSelect(filename) {

  var output = document.getElementsByTagName('output')[0];
  output.innerHTML = '';

  FS_.root.getFile(filename, {create: false}, function(fileEntry) {

    var src = null;

    // Get the File for this FileEntry.
    fileEntry.file(function(file) {

      if (!file.type || !file.type.match(/image.*/)) {
        alert('This is not an image!');
        return;
      }

      // Method 1: create a Blob URL to the file.
      src = window.URL.createObjectURL(file);
      output.appendChild(buildFigure(src));

      // The browser will release Blob URL references when the page unloads, but
      // it's always a good idea to free the memory if you're done using it.
      // window.URL.revokeObjectURL(src);

      // Method 2: use the FileReader API to read the contents into a dataURL.
      var reader = new FileReader();

      // Closure to capture the file information.
      reader.onload = function(e) {
        src = e.target.result;
        output.appendChild(buildFigure(src));
      };

      reader.readAsDataURL(file);
    });

    // Method 3: use the FileSystem's Entry.toURL() to create a URL to the file.
    src = fileEntry.toURL ? fileEntry.toURL() : fileEntry.toURI()
    output.appendChild(buildFigure(src));

  }, errorCallback);
}

function deleteFile(filesystemPath) {
  window.resolveLocalFileSystemURL(filesystemPath, function(fileEntry) {
    fileEntry.remove(function() {
      readDirectories();
    }, errorCallback);
  }, errorCallback);
}

function readDirectories() {

  var dirReader = FS_.root.createReader();
  var fragment = document.createDocumentFragment();
  var filelist = document.getElementById('filelist');
  filelist.innerHTML = '';  // Clear list of files on new read.

  // Need to recursively read directories until there are no more results.
  var readEntries = function() {

    dirReader.readEntries(function(entries) {
      if (entries.length) {
        for (var i = 0, entry; entry = entries[i]; ++i) {
          if (entry.isFile) {
            var div = document.createElement('div');
            div.innerHTML =
                ['<a href="javascript:onFileSelect(\'', entry.name, '\');">', entry.name,
                 '</a><a href="javascript:deleteFile(\'', entry.toURL ? entry.toURL() : entry.toURI(),
                 '\');" class="remove">delete</a>'].join('');
            fragment.appendChild(div);
          }
        }
        readEntries();
      } else {
        filelist.appendChild(fragment);
        if (!filelist.childElementCount) {
          filelist.textContent = "No image files in the app's filesystem. Import some above.";
        }
      }
    }, errorCallback);

  };

  readEntries();
}

document.getElementById('files').addEventListener('change', function(e) {

  for (var i = 0, file; file = this.files[i]; ++i) {
    // Capture current iteration's file in local scope for the getFile() callback.
    (function(f) {
      var filename = 'THIS_DEMO_' + file.name.replace(/\s/g, '_');
      FS_.root.getFile(filename, {create: true, exclusive: true}, function(fileEntry) {
        fileEntry.createWriter(function(fileWriter) {
          fileWriter.write(f);
        }, errorCallback);
      }, errorCallback);
    })(file);
  }

  readDirectories();
}, false);

//window.requestFileSystem(TEMPORARY, 1024 * 1024,  function(fs) {
//  FS_ = fs;
//  readDirectories();
//}, errorCallback);

var requestedBytes = 1024*1024*10; // 10MB

navigator.webkitPersistentStorage.requestQuota (
    requestedBytes, function(grantedBytes) {  
        window.requestFileSystem(PERSISTENT, grantedBytes,  function(fs) {
  			FS_ = fs;
			readDirectories();
		}, errorCallback);

    }, function(e) { console.log('Error', e); }
);

</script>
<script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-22014378-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</body>
</html>
