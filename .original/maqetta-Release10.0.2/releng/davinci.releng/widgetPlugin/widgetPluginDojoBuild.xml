<!-- ===================================================================== -->
<!-- Custom targets called from a project's generated build.xml            -->
<!-- Set customBuildCallbacks=<path/to/this/file> in your build.properties.-->
<!-- ===================================================================== -->
<project name="Build Dojo library and metadata for widget plug-in" default="noDefault">

	<property environment="env"/>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.jars                              -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.jars">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.jars                               -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.jars">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.sources                            -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the compilation target <name>                      -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="pre.name">
	</target>

	<target name="pre.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do during the compilation target <name>, after the compile   -->
	<!-- but before jaring.  Substitute "name" with the name of the compilation-->
	<!-- target, eg @dot                                                       -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.compile.name">
	</target>

	<target name="post.compile.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the compilation target <name>                       -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   jar.location - the location of the compilation results              -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.name">
	</target>

	<target name="post.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="pre.gather.bin.parts">
	</target>
	
	<target name="davinciPlugin.build" if="run.dojo.build" unless="davinciPlugin.build.exists">
		<echo message="Prepping for Dojo build of '${davinciPlugin.id}' plugin..." />
		<property name="logExtension" value=".log"/>
		<property name="logFile" value="${build.result.folder}/@dot${logExtension}"/>

    	<!-- Figure out if we already have a "dojo" directory. At the risk of building in a 
    	     small amount of plug-in specific knowledge, we don't want to overwrite the 
    	     library dir for the dojo_1_8 plug-in.-->
    	<condition property="davinciPlugin.dojoDir.exists">
    		<available file="${target.folder}/WebContent/dojo" type="dir"/>
    	</condition>

		<!-- remove tests in the src directory, if present, to reduce the size of the image -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${target.folder}/WebContent/${davinciPlugin.id}-src" includes="**/tests/**" />
		</delete>

    	<antcall target="copy.dojoLibs"/>
    	<antcall target="move.dojoLibs"/>

		<antcall target="copy.maqettaLibs"/>
		
		<!-- copy in helpers from dojo_1_8 plugin -->
		<antcall target="copy.dojo18.metadata"/>
		
		<!-- need to move/copy metadata to directory with same name as runtime module id before building -->
		<copy todir="${target.folder}/WebContent/${davinciPlugin.metadata.moduleId}" failonerror="true" overwrite="true" description="copying metadata files">
				<fileset dir="${target.folder}/WebContent/metadata">
					<include name="*/**"/>
				</fileset>
		</copy>
		<delete dir="${target.folder}/WebContent/metadata/"/>
		
		<!-- Replace '"metadata' in dojo profile  with the module id Maqetta will use for the plugin's metadata at runtime...
			Using '"metadata' as the token so we change things like:
			
				[ "metadata", "../metadata" ] 
			
			but leave alone things like:
			
				[ "maq-metadata-dojo", "../maq-metadata-dojo" ],
		 -->
		<replace file="${target.folder}/${davinciPlugin.dojo.profile}" token='"metadata' value='"${davinciPlugin.metadata.moduleId}'/>
		<!-- Also, need to deal with "../metadata" -->
		<replace file="${target.folder}/${davinciPlugin.dojo.profile}" token="../metadata" value="../${davinciPlugin.metadata.moduleId}"/>

		<!-- run dojo build tooling -->
		<echo message="Running Dojo build on '${davinciPlugin.id}' plugin ..." />
		<java fork="true" resultproperty="returnCode" failonerror="true" output="${logFile}" append="true" dir="${target.folder}/WebContent/util/buildscripts"
			    maxmemory="1024m"
				classpath="${target.folder}/WebContent/util/shrinksafe/js.jar;${target.folder}/WebContent/util/shrinksafe/shrinksafe.jar"
				classname="org.mozilla.javascript.tools.shell.Main"
				description="Run Dojo build script"
				>
				<arg value="${target.folder}/WebContent/dojo/dojo.js"/>
				<arg value="baseUrl=${target.folder}/WebContent/dojo"/>
				<arg value="load=build"/>
				<arg value="profile=${target.folder}/${davinciPlugin.dojo.profile}"/>
				<arg value="action=release"/>
				<arg value="selectorEngine=acme"/>
				<arg value="optimize=shrinksafe.keepLines"/>
        		<arg value="layerOptimize=shrinksafe.keepLines"/>
        		<arg value="cssOptimize=comments"/>
        		<arg value="mini=true"/>
		</java>

		<echo message="Cleaning up after Dojo build on '${davinciPlugin.id}' plugin ..." />

		<!-- Cache our build results -->
		<mkdir dir="${davinciPlugin.dojo.cache.directory}"/>
		<antcall target="restore.dojoLibs"/>
		<antcall target="cache.davinciPlugin.library"/>
		<antcall target="cache.davinciPlugin.metadata"/>

		<!-- Delete directory used by dojo build tooling -->
		<delete dir="${target.folder}/WebContent/release" />
		
		<!-- Do additional clean-up -->
		<delete dir="${target.folder}/WebContent/${davinciPlugin.metadata.moduleId}"/>
		<!-- delete helpers we had copied from dojo_1_8 plugin -->
		<antcall target="delete.dojo18.metadata"/>
		<antcall target="delete.dojoLibs"/>
		<antcall target="delete.maqettaLibs"/>
	</target>

	<patternset id="dojo.sources">
		<include name="dijit/"/>
		<include name="dojo/"/>
		<include name="dojox/"/>
		<exclude name="**/tests/**"/>
		<exclude name="dojox/cometd/"/>
		<exclude name="dojox/cometd.js"/>
		<exclude name="dojox/data/demos/"/>
		<exclude name="dojox/drawing/"/>
		<exclude name="dojox/drawing.js"/>
		<exclude name="dojox/sketch/"/>
		<exclude name="dojox/sketch.js"/>
		<exclude name="dojox/xmpp/"/>
	</patternset>

	<target name="copy.dojoLibs" unless="davinciPlugin.dojoDir.exists">
		<!-- copy in dojo to working directory in prep for build -->
		<!-- Note that we are using the Maqetta client's version of Dojo, which may not be the correct version for the plugin -->
		<copy todir="${target.folder}/WebContent" failonerror="true" overwrite="true" description="copying dojo dependencies">
			<fileset dir="${basedir}/../maqetta.core.client/WebContent">
				<patternset refid="dojo.sources"/>
			</fileset>
		</copy>
	</target>

	<!-- all this is made more complicated by the fact that the dojo plugin chose to put its Javascript
		web content under WebContent/dojo/* instead of WebContent/*  It needs to be moved to the root to
		match other plugins. -->
	<target name="move.dojoLibs" if="davinciPlugin.dojoDir.exists">
		<!-- rename to avoid collision -->
    	<move file="${target.folder}/WebContent/dojo" tofile="${target.folder}/WebContent/dojo-temp"/>
    	<move todir="${target.folder}/WebContent/">
			<fileset dir="${target.folder}/WebContent/dojo-temp">
				<patternset refid="dojo.sources"/>
			</fileset>
		</move>
       	<delete dir="${target.folder}/WebContent/dojo-temp"/>
	</target>

	<target name="delete.dojoLibs" unless="davinciPlugin.dojoDir.exists">
		<delete dir="${target.folder}/WebContent/dijit/"/>
		<delete dir="${target.folder}/WebContent/dojo/"/>
		<delete dir="${target.folder}/WebContent/dojox/"/>
	</target>
	
	<target name="restore.dojoLibs" if="davinciPlugin.dojoDir.exists">
		<delete dir="${target.folder}/WebContent/dijit/"/>
		<delete dir="${target.folder}/WebContent/dojo/"/>
		<delete dir="${target.folder}/WebContent/dojox/"/>
		<mkdir dir="${target.folder}/WebContent/dojo/"/>
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${target.folder}/WebContent/release/dojo" includes="**/*.uncompressed.js" />
		</delete>
    	<move file="${target.folder}/WebContent/release/dojo/dojo" todir="${target.folder}/WebContent/dojo/"/>
    	<move file="${target.folder}/WebContent/release/dojo/dijit" todir="${target.folder}/WebContent/dojo/"/>
       	<move file="${target.folder}/WebContent/release/dojo/dojox" todir="${target.folder}/WebContent/dojo/"/>
	</target>

	<target name="copy.maqettaLibs">
		<!-- copy in Maqetta code and dojo utils to working directory in prep for build, to satisfy helper dependencies -->
		<copy todir="${target.folder}" failonerror="true" overwrite="true" description="copying maqetta dependencies and dojo utils">
			<fileset dir="${basedir}/../maqetta.core.client">
				<include name="WebContent/util/"/>
				<include name="WebContent/davinci/"/>
				<include name="WebContent/orion/"/>
				<include name="WebContent/preview/"/>
				<include name="WebContent/system/"/>
			</fileset>
		</copy>
	</target>

	<target name="delete.maqettaLibs">
		<delete dir="${target.folder}/WebContent/davinci/"/>
		<delete dir="${target.folder}/WebContent/orion/"/>
		<delete dir="${target.folder}/WebContent/preview/"/>
		<delete dir="${target.folder}/WebContent/system/"/>
		<delete dir="${target.folder}/WebContent/util/"/>
	</target>

	<!-- copy in helpers from dojo_1_8 plugin... if we didn't have a "dojo" directory when we started (representing 
		 the plugin's library), we can assume we're not currently building the the dojo_1_8 plugin, and we'll need 
		 its helpers. -->
	<target name="copy.dojo18.metadata" unless="davinciPlugin.dojoDir.exists">
		<copy todir="${target.folder}/WebContent/maq-metadata-dojo" failonerror="true" overwrite="true" description="copy in helpers from dojo_1_8 plugin">
				<fileset dir="${basedir}/../davinci.dojo_1_8/WebContent/metadata">
					<include name="*/**"/>
				</fileset>
		</copy>
	</target>
	
	<!-- delete helpers we copied in from dojo_1_8 plugin (if we're not currently building
		the dojo_1_8 plugin). -->
	<target name="delete.dojo18.metadata" unless="davinciPlugin.dojoDir.exists">
		<delete dir="${target.folder}/WebContent/maq-metadata-dojo/"/>
	</target>
	
	<target name="cache.davinciPlugin.library">
		<copy todir="${davinciPlugin.dojo.cache.directory}" failonerror="true" overwrite="true" description="move ${davinciPlugin.id} build">
			<fileset dir="${target.folder}/WebContent/release/dojo">
				<include name="${davinciPlugin.id}/"/>
			</fileset>
		</copy>
	</target>
	
	<!-- cache the plugin's built metadata -->
	<target name="cache.davinciPlugin.metadata">
		<copy todir="${davinciPlugin.dojo.cache.directory}/metadata" failonerror="true" overwrite="true" description="move ${davinciPlugin.id} metadata build">
			<fileset dir="${target.folder}/WebContent/release/dojo/${davinciPlugin.metadata.moduleId}">
				<include name="*/**"/>
			</fileset>
		</copy>
	</target>
	
	<!-- copy from the build cache back into the plug-ins working directory-->
	<target name="copy.davinciPlugin" if="run.dojo.build">
		<antcall target="copy.davinciPlugin.library"/>
		<antcall target="copy.davinciPlugin.metadata"/>
	</target>
	
	<target name="copy.davinciPlugin.library">
		<copy todir="${target.folder}/WebContent" failonerror="true" overwrite="true" description="Copy cached ${davinciPlugin.id} build">
			<fileset dir="${davinciPlugin.dojo.cache.directory}">
				<include name="${davinciPlugin.id}/"/>
			</fileset>
		</copy>
	</target>
	
	<!-- copy metadata from cache back into working dir -->
	<target name="copy.davinciPlugin.metadata">
		<copy todir="${target.folder}/WebContent" failonerror="true" overwrite="true" description="Copy cached ${davinciPlugin.id} build">
			<fileset dir="${davinciPlugin.dojo.cache.directory}">
				<include name="metadata/"/>
			</fileset>
		</copy>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="post.gather.bin.parts">
		<!-- Examine plugin.xml to get the plugin's id and version. -->
		<xmlproperty file="${target.folder}/plugin.xml" collapseAttributes="true"/>

		<!-- Using JavaScript because base ANT doesn't have these sorts of string manipulation abilities.-->
		<script language="javascript">
    		<![CDATA[
    			var ajaxLibraryId = new String(project.getProperty("plugin.extension.ajaxLibrary.id"));
    			var ajaxLibraryVersion = new String(project.getProperty("plugin.extension.ajaxLibrary.version"));
        		if (ajaxLibraryId && ajaxLibraryVersion) {
        			//A little hack, but dojo_1_7 plugin has two ajaxLibrary XML elements. So, just use first one.
        			ajaxLibraryId = ajaxLibraryId.split(",")[0];
        			ajaxLibraryVersion = ajaxLibraryVersion.split(",")[0];
        		
        			//Set prop for id
        			project.setProperty("davinciPlugin.id", ajaxLibraryId);
        		
        			//Replace periods with underscores in the version
        			var ajaxLibraryNormalizedVersion = ajaxLibraryVersion.replace(/\./g, "_");
            		project.setProperty("davinciPlugin.normalizedVersion", ajaxLibraryNormalizedVersion);
        		}
    		]]>
    	</script>

		<property name="davinciPlugin.id" value="${plugin.extension.ajaxLibrary.id}"/>
		<echo>Post gather for &quot;${davinciPlugin.id}&quot;, version=&quot;${davinciPlugin.normalizedVersion}&quot; ...</echo>

		<property name="davinciPlugin.dojo.cache.directory" value="${dojo.cache.directory}/${davinciPlugin.id}_${davinciPlugin.normalizedVersion}"/>
<!-- disable version		<property name="davinciPlugin.metadata.moduleId" value="maq-metadata-${davinciPlugin.id}-${davinciPlugin.normalizedVersion}"/> -->
		<property name="davinciPlugin.metadata.moduleId" value="maq-metadata-${davinciPlugin.id}"/>
		<property name="davinciPlugin.dojo.profile" value="${davinciPlugin.id}.profile.js"/>
    	<condition property="davinciPlugin.build.exists">
    		<available file="${davinciPlugin.dojo.cache.directory}" type="dir"/>
    	</condition>
		<echo message="Build ${davinciPlugin.id}=${run.dojo.build}"/>
		<antcall target="davinciPlugin.build"/>

		<antcall target="copy.davinciPlugin"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.sources                          -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.logs                             -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.logs                              -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target clean                                   -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.clean">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target clean                                    -->
	<!-- Available parameters :                                                -->
	<!--   plugin.destination - final destination of the build                 -->
	<!--   build.result.folder - results of the compilation                    -->
	<!--   temp.folder - temporary folder                                      -->
	<!-- ===================================================================== -->
	<target name="post.clean">
	</target>
</project>
